// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/yashkadam007/brewkar/internal/config"
	"github.com/yashkadam007/brewkar/internal/controller"
	"github.com/yashkadam007/brewkar/internal/repository"
	"github.com/yashkadam007/brewkar/internal/router"
	"github.com/yashkadam007/brewkar/internal/service"
)

// Injectors from wire.go:

// InitializeApp initializes the complete application
func InitializeApp() (*gin.Engine, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	logger := ProvideLogger()
	db, err := ProvideDatabase(config, logger)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(db)
	authServiceImpl := provideAuthService(userRepository, config)
	authController := controller.NewAuthController(authServiceImpl)
	engine := router.SetupRouter(authController)
	return engine, nil
}

// wire.go:

var infraSet = wire.NewSet(
	ProvideConfig,
	ProvideLogger,
	ProvideDatabase,
)

var repoSet = wire.NewSet(repository.NewUserRepository)

var serviceSet = wire.NewSet(wire.Bind(new(service.AuthService), new(*service.AuthServiceImpl)), provideAuthService)

var controllerSet = wire.NewSet(controller.NewAuthController)

// Provider functions
func provideAuthService(userRepo repository.UserRepository, cfg *config.Config) *service.AuthServiceImpl {
	return service.NewAuthService(userRepo, cfg.JWT).(*service.AuthServiceImpl)
}
